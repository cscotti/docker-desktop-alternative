---
# ansible-playbook -i hosts ./playbook_docker_start.yml
# https://www.bogotobogo.com/DevOps/Ansible/Ansible-Deploying-a-Go-App-to-Minikube.php
- name: go minikube
  hosts: localhost
  gather_facts: False

  vars:

    ansible_python_interpreter: '{{ ansible_playbook_python }}'
    image_name: python-hello-world
    image_tag: latest
    local_workdir: $HOME/minikube
    minikube_system_workdir: /workdir
    datadir: /data
    srcdir: /app/src
    #dockerfile_context_folder: $HOME/minikube
    dockerfile_name: Dockerfile.alpine
    #replicas: 4
    minikube_profile: docker-only
    minikube_driver: hyperkit # https://minikube.sigs.k8s.io/docs/drivers/ 
    minikube_runtime: docker
    minikube_cpu: 2
    minikube_memory: 4096
    

  pre_tasks:

    - name: Get user homedir
      shell: echo "{{local_workdir}}"
      register: homeworkdir

    - name: check the status of minikube.
      shell: |
        minikube config unset kubernetes-version
        # minikube config set kubernetes-version v1.21.11
        test=$(minikube -p {{minikube_profile}} status 2> /dev/null  |grep -c 'host: Running')
        if [ "$test" -eq "1" ];then 
          echo 'Running'
        else 
          echo 'Stop'
        fi
      # [[ $(minikube status 2> /dev/null  |grep -c 'host: Running') == 1 ]] && true || false
      register: minikube_status
      changed_when: false
      ignore_errors: true

    - name: minikube_status output
      debug:
        var: minikube_status.stdout

    - name: start minikube if it's not running.
      command: "minikube start -p {{minikube_profile}} --no-kubernetes \
        --mount --mount-string='{{ homeworkdir.stdout }}:{{ minikube_system_workdir }}' --vm-driver={{minikube_driver}} \
        --cpus {{minikube_cpu}} --memory {{minikube_memory}}  --container-runtime={{minikube_runtime}}  = true"
      when: "not minikube_status.stdout or 'Running' not in minikube_status.stdout"

  tasks:

    - name: get existing image hash.
      shell: |
        eval $(minikube -p {{minikube_profile}} docker-env)
        docker images -q {{ image_name }}
      register: image_hash
      changed_when: false

    - name: build image if it's not already built. 
      #https://docs.docker.com/network/host/
      shell: | 
        eval $(minikube -p {{minikube_profile}} docker-env)
        docker build -t {{ image_name }}:{{ image_tag }} -f {{dockerfile_name}} . --network host
      when: not image_hash.stdout

    - name: run docker image
      shell: |
        eval $(minikube -p {{minikube_profile}} docker-env)
        docker stop {{ image_name }}
        docker rm {{ image_name }}
        docker run --name {{ image_name }} -v {{minikube_system_workdir}}{{srcdir}}:{{srcdir}} -v {{minikube_system_workdir}}{{datadir}}:{{datadir}} \
        -d {{ image_name }}:{{ image_tag }} {{ image_name }}
        docker ps |grep {{ image_name }} |awk '{print $2}'
      register: docker_run_container
      changed_when: false

    #- debug: var=docker_run_container.stdout_lines

    - name: Print
      vars:
        msg: |
          ---container interative access--------
          eval $(minikube -p {{minikube_profile}} docker-env)
          docker exec -it {{image_name}} /bin/bash
          docker exec -it {{image_name}} /bin/sh
          --------------------------------------
      debug:
        msg: "{{ msg.split('\n') }}"

    # - name: create a deployment for Hello Go.
    #   k8s:
    #     state: present
    #     definition:
    #       apiVersion: apps/v1
    #       kind: Deployment
    #       metadata:
    #         name: hello-go
    #         namespace: default
    #       spec:
    #         replicas: "{{ replicas }}"
    #         selector:
    #           matchLabels:
    #             app: hello-go
    #         template:
    #           metadata:
    #             labels:
    #               app: hello-go
    #           spec:
    #             containers:
    #             - name: hello-go
    #               image: "{{ image_name }}:{{ image_tag }}"
    #               imagePullPolicy: IfNotPresent
    #               ports:
    #               - containerPort: 8181

    # - name: create a Service for Hello Go.
    #   k8s:
    #     state: present
    #     definition:
    #       apiVersion: v1
    #       kind: Service
    #       metadata:
    #         name: hello-go
    #         namespace: default
    #       spec:
    #         type: LoadBalancer
    #         ports:
    #         - port: 8181
    #           targetPort: 8181
    #         selector:
    #           app: hello-go

  # post_tasks:

  #   - name: exposing Hello Go on the host via Minikube.
  #     command: minikube service hello-go --url
  #     changed_when: false
  #     register: minikube_service

  #   - debug:
  #       msg: "Hello Go URL: {{ minikube_service['stdout_lines'][0] }}"

  #   - name: verify Hello Go is responding.
  #     uri:
  #       url: "{{ minikube_service['stdout_lines'][0] }}/test"
  #       return_content: true
  #     register: hello_go_response
  #     failed_when: "'/test' not in hello_go_response.content"

  #   - debug:
  #       msg: "Testing URL Hello GO Requested: {{hello_go_response.content}} Status: {{hello_go_response.status}}"
